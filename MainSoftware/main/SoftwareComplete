// Copyright (C) 2013-2014 Thalmic Labs Inc.
// Distributed under the Myo SDK license agreement. See LICENSE.txt for details.

// This sample illustrates how to use EMG data. EMG streaming is only supported for one Myo at a time.

#include <Windows.h>
#include <array>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>
#include <ctime>
#include <myo/myo.hpp>


class DataCollector : public myo::DeviceListener {
public:
	DataCollector()
		: emgSamples()
	{
	}

	// onUnpair() is called whenever the Myo is disconnected from Myo Connect by the user.
	void onUnpair(myo::Myo* myo, uint64_t timestamp)
	{
		// We've lost a Myo.
		// Let's clean up some leftover state.
		emgSamples.fill(0);
	}

	// onEmgData() is called whenever a paired Myo has provided new EMG data, and EMG streaming is enabled.
	void onEmgData(myo::Myo* myo, uint64_t timestamp, const int8_t* emg)
	{
		for (int i = 0; i < 8; i++) {
			emgSamples[i] = emg[i];
		}
	}

	// There are other virtual functions in DeviceListener that we could override here, like onAccelerometerData().
	// For this example, the functions overridden above are sufficient.


	void calibrateLow(int &lineCounter) {
		lineCounter++;
		// Clear the current line
		std::cout << "\nREADINGS: ";
		for (size_t i = 0; i < emgSamples.size(); i++) {
			std::ostringstream oss;
			oss << static_cast<int>(emgSamples[i]);
			std::string emgString = oss.str();

			std::cout << emgString << std::string(4 - emgString.size(), ' ');
			podSumsLow[i] = podSumsLow[i] + abs(std::stoi(emgString));
			podAveragesLow[i] = podSumsLow[i] / lineCounter;
		}
		std::cout << std::flush;
	}

	void calibrateHigh(int &lineCounter) {
		lineCounter++;
		// Clear the current line
		std::cout << "\nREADINGS: ";
		for (size_t i = 0; i < emgSamples.size(); i++) {
			std::ostringstream oss;
			oss << static_cast<int>(emgSamples[i]);
			std::string emgString = oss.str();

			std::cout << emgString << std::string(4 - emgString.size(), ' ');
			podSumsHigh[i] = podSumsHigh[i] + abs(std::stoi(emgString));
			podAveragesHigh[i] = podSumsHigh[i] / lineCounter;
		}
		std::cout << std::flush;
	}

	// We define this function to print the current values that were updated by the on...() functions above.
	void print(int &lineCounter)
	{
		lineCounter++;
		int lowCount = 0;
		int highCount = 0;
		// Clear the current line
		std::cout << "\nREADINGS: ";

		// Print out the EMG data.
		for (size_t i = 0; i < emgSamples.size(); i++) {
			std::ostringstream oss;
			oss << static_cast<int>(emgSamples[i]);
			std::string emgString = oss.str();

			std::cout << emgString << std::string(4 - emgString.size(), ' ');

			if (podHistory[i].size() > 5) {
				podHistory[i].erase(podHistory[i].begin());
				podHistory[i].push_back(abs(std::stoi(emgString)));
			}
			else {
				podHistory[i].push_back(abs(std::stoi(emgString)));
			}
		}



		for (int pod = 0; pod < 8; pod++) {
			int sum = 0;
			float average = 0;
			for (auto i = podHistory[pod].begin(); i != podHistory[pod].end(); i++) {
				sum += *i;
			}
			average = sum / 6.0;
			if (average > (podAveragesHigh[pod] * .9)) {
				highCount++;
			}
			else if (average > (podAveragesLow[pod] * .9)) {
				lowCount++;
			}
		}

		if (highCount == 8) {
			pulseLevel = "high";
		}
		else if (lowCount == 5) {
			pulseLevel = "low";
		}
		else {
			pulseLevel = "zero";
		}
		std::cout << std::flush;
	}


	void showVector() {
		for (int pod = 0; pod < 8; pod++) {
			std::cout << "\npod[" << pod << "]: ";
			for (auto i = podHistory[pod].begin(); i != podHistory[pod].end(); i++) {
				std::cout << *i << " ";
			}
			std::cout << std::endl;
		}
	}

	void showArray() {
		std::cout << "\npodAveragesLow: ";
		for (int i = 0; i < 8; i++) {
			std::cout << podAveragesLow[i] << " ";
		}
		std::cout << "\npodAveragesHigh: ";
		for (int i = 0; i < 8; i++) {
			std::cout << podAveragesHigh[i] << " ";
		}
	}

	void stateMachine(){
		switch (state) {
			case 0:
				std::cout << "state 0: REST\n";
				if (pulseLevel != "zero") { //if pulse
					state = 1;
					pulseLevel = "zero";
				}
				break;
			case 1:
				std::cout << "state 1: STANDBY\n";
				//std::cout << "cooldown: " << cooldown << std::endl;
				//std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					if (pulseLevel == "low") { //if low pulse
						timeOutCount = 0;
						cooldown = 0;
						state = 2;
						pulseLevel = "zero";
					}
					else if (pulseLevel == "high") { //if high pulse
						timeOutCount = 0;
						cooldown = 0;
						state = 7;
						pulseLevel = "zero";
					}
					timeOutCount++;
					if (timeOutCount == 100) { //if timeout
						cooldown = 0;
						timeOutCount = 0;
						state = 0;
						pulseLevel = "zero";
					}
				}
				break;
			case 2:
				std::cout << "state 2: DETERMINE OREINTATION\n";
				//std::cout << "cooldown: " << cooldown << std::endl;
				//std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					timeOutCount++;
					if (timeOutCount == 100) { //if timeout
						cooldown = 0;
						timeOutCount = 0;
						state = 3;
					}
					else {
						if (pulseLevel != "zero") {
							timeOutCount = 0;
							cooldown = 0;
							state = 10;
							pulseLevel = "zero";
						}
					}
				}
				break;
			case 3:
				std::cout << "state 3: ROTATE CLOCKWISE\n";
			//	std::cout << "cooldown: " << cooldown << std::endl;
			//	std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					if (pulseLevel != "zero") {
						timeOutCount = 0;
						cooldown = 0;
						state = 1;
						pulseLevel = "zero";
					}
				}
				break;
			case 4:
				std::cout << "state 4: ROTATE COUNTER CLOCKWISE\n";
				//std::cout << "cooldown: " << cooldown << std::endl;
				//std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					if (pulseLevel != "zero") {
						timeOutCount = 0;
						cooldown = 0;
						state = 1;
						pulseLevel = "zero";
					}
				}
				break;
			case 5:
				std::cout << "state 5: HAND UP\n";
				//std::cout << "cooldown: " << cooldown << std::endl;
				//std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					if (pulseLevel != "zero") {
						timeOutCount = 0;
						cooldown = 0;
						state = 1;
						pulseLevel = "zero";
					}
				}
				break;
			case 6:
				std::cout << "state 6: HAND DOWN\n";
				//std::cout << "cooldown: " << cooldown << std::endl;
				//std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					if (pulseLevel != "zero") {
						timeOutCount = 0;
						cooldown = 0;
						state = 1;
						pulseLevel = "zero";
					}
				}
				break;
			case 7:
				std::cout << "state 7: DETERMINE GRIP OR OPEN\n";
			//	std::cout << "cooldown: " << cooldown << std::endl;
			//	std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					timeOutCount++;
					if (timeOutCount == 100) { //if timeout
						timeOutCount = 0;
						cooldown = 0;
						timeOutCount = 0;
						state = 8;
					}
					else {
						if (pulseLevel != "zero") {
							timeOutCount = 0;
							cooldown = 0;
							state = 12;
							pulseLevel = "zero";
						}
					}
				}
				break;
			case 8:
				std::cout << "state 8: GRIP\n";
			//	std::cout << "cooldown: " << cooldown << std::endl;
			//	std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					if (pulseLevel != "zero") {
						timeOutCount = 0;
						cooldown = 0;
						state = 1;
						pulseLevel = "zero";
					}
				}
				break;

			case 9:
				std::cout << "state 9: OPEN\n";
				//std::cout << "cooldown: " << cooldown << std::endl;
				//std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					if (pulseLevel != "zero") {
						timeOutCount = 0;
						cooldown = 0;
						state = 1;
						pulseLevel = "zero";
					}
				}
				break;
			case 10: 
				std::cout << "state 10: DETERMINE THIRD PULSE OR NOT\n";
				//std::cout << "cooldown: " << cooldown << std::endl;
				//std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					timeOutCount++;
					if (timeOutCount == 100) { //if timeout
						cooldown = 0;
						timeOutCount = 0;
						state = 4;
					}
					else {
						if (pulseLevel != "zero") {
							timeOutCount = 0;
							cooldown = 0;
							state = 11;
							pulseLevel = "zero";
						}
					}
				}
				break;
			case 11:
				std::cout << "state 11: HANDS UP\n";
				//std::cout << "cooldown: " << cooldown << std::endl;
				//std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					if (pulseLevel != "zero") {
						timeOutCount = 0;
						cooldown = 0;
						state = 1;
						pulseLevel = "zero";
					}
				}
				break;
			case 12:
				std::cout << "state 12: DETERMINE THIRD PULSE OR NOT\n";
				//std::cout << "cooldown: " << cooldown << std::endl;
				//std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					timeOutCount++;
					if (timeOutCount == 100) { //if timeout
						timeOutCount = 0;
						cooldown = 0;
						timeOutCount = 0;
						state = 9;
					}
					else {
						if (pulseLevel != "zero") {
							timeOutCount = 0;
							cooldown = 0;
							state = 13;
							pulseLevel = "zero";
						}
					}
				}
				break;
			case 13:
				std::cout << "state 13: HANDS DOWN\n";
				//std::cout << "cooldown: " << cooldown << std::endl;
				//std::cout << "timeOutCount: " << timeOutCount << std::endl;
				cooldown++;
				if (cooldown < 20) {
					break;
				}
				else {
					if (pulseLevel != "zero") {
						timeOutCount = 0;
						cooldown = 0;
						state = 1;
						pulseLevel = "zero";
					}
				}
				break;
		}
	}

	// The values of this array is set by onEmgData() above.
	std::string pulseLevel = "";
	std::string prevLevel = "zero";
	int state = 0;
	int timeOutCount = 0;
	int cooldown = 0;
	int kyleCounter = 0;
	int lowPulseCount = 0;
	int	highPulseCount =0;
	std::array<int8_t, 8> emgSamples;
	std::vector<int> podHistory[8];
	int podSumsLow[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	float podAveragesLow[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	int podSumsHigh[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	float podAveragesHigh[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
};

int main(int argc, char** argv)
{
	// We catch any exceptions that might occur below -- see the catch statement for more details.
	try {

		// First, we create a Hub with our application identifier. Be sure not to use the com.example namespace when
		// publishing your application. The Hub provides access to one or more Myos.
		myo::Hub hub("com.example.emg-data-sample");

		std::cout << "Attempting to find a Myo..." << std::endl;

		// Next, we attempt to find a Myo to use. If a Myo is already paired in Myo Connect, this will return that Myo
		// immediately.
		// waitForMyo() takes a timeout value in milliseconds. In this case we will try to find a Myo for 10 seconds, and
		// if that fails, the function will return a null pointer.
		myo::Myo* myo = hub.waitForMyo(10000);

		// If waitForMyo() returned a null pointer, we failed to find a Myo, so exit with an error message.
		if (!myo) {
			throw std::runtime_error("Unable to find a Myo!");
		}

		// We've found a Myo.
		std::cout << "Connected to a Myo armband!" << std::endl << std::endl;

		// Next we enable EMG streaming on the found Myo.
		myo->setStreamEmg(myo::Myo::streamEmgEnabled);

		// Next we construct an instance of our DeviceListener, so that we can register it with the Hub.
		DataCollector collector;

		// Hub::addListener() takes the address of any object whose class inherits from DeviceListener, and will cause
		// Hub::run() to send events to all registered device listeners.
		hub.addListener(&collector);

		char beginChar;
		int lineCounter = 0;

		std::cout << "Welcome to calibration! Please do a low pulse for 5 seconds. \"Enter\" to begin.\n";
		std::cin.ignore();
		while (lineCounter != 100) { //5seconds
			hub.run(1000 / 20);
			collector.calibrateLow(lineCounter);
		}
		collector.showArray();
		std::cout << "\nPlease do a high pulse for 5 seconds. \"Enter\" to begin.\n";
		std::cin.ignore();
		lineCounter = 0;
		while (lineCounter != 100) { //5 seconds
			hub.run(1000 / 20);
			collector.calibrateHigh(lineCounter);
		}
		collector.showArray();
		std::cout << "\nAll systems operational. \"Enter\" to begin\n";
		std::cin.ignore();
		
		lineCounter = 0;

		//timer
		int timer = 0;

		// Finally we enter our main loop.
		while (1) {
			// In each iteration of our main loop, we run the Myo event loop for a set number of milliseconds.
			// In this case, we wish to update our display 50 times a second, so we run for 1000/20 milliseconds.
			hub.run(50);
			// After processing events, we call the print() member function we defined above to print out the values we've
			// obtained from any events that have occurred.

			collector.print(lineCounter);
			//collector.checker();
			collector.stateMachine();
		}
		collector.showVector();
		// If a standard exception occurred, we print out its message and exit.
	}
	catch (const std::exception& e) {
		std::cerr << "Error: " << e.what() << std::endl;
		std::cerr << "Press enter to continue.";
		std::cin.ignore();
		return 1;
	}
}
